import os
import socket
import threading

from sqlalchemy import create_engine, MetaData, Table
from sqlalchemy.sql import select

# Client aur server dono ke liye unki alag alag settings file hai
# setting file me bas configration hai
# padh liya naa, ab goto line num 87
import json
with open('setting_server.json') as json_data:
    setting_server = json.load(json_data)
db_host = setting_server['host']
user = setting_server['user']
passwd = setting_server['passwd']
db = setting_server['db']
TCP_PORT = setting_server['TCP_PORT']
BUFFER_SIZE = setting_server['BUFFER_SIZE']
THRESHOLD_CONN = setting_server['THRESHOLD_CONN']
THRESHOLD_SCORE = setting_server['THRESHOLD_SCORE']
DEFAULT_CONNECTION_ATTEMPTS = setting_server['DEFAULT_CONNECTION_ATTEMPTS']
DEFAULT_REPUTATION_SCORE = setting_server['DEFAULT_REPUTATION_SCORE']


engine = create_engine('mysql+mysqldb://'+user+':'+passwd+'@'+db_host+'/'+db)
connection = engine.connect()
metadata = MetaData(engine)
reputation = Table('reputation', metadata, autoload=True, autoload_with=engine)



class ThreadedServer(object):
    def __init__(self, host, port):
        self.host = host
        self.port = port
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.sock.bind((self.host, self.port))


    def listen(self):
        self.sock.listen(5)
        while True:
            (client, (address, port)) = self.sock.accept()
            client.settimeout(60)
            threading.Thread(target = self.listenToClient,args = (client,address,port)).start()


    def listenToClient(self, sock, address, port):
        # Receive and extract mac_address which is send at start of socket stream
        accept_flag = True
        create_new_entry_flag = False
        mac_address = self.getMacAddress(sock)
        db_data = self.getClientDataByMacAddress(mac_address)
        if db_data:
            db_connection_attempts = db_data[0]
            db_reputation_score = db_data[1]
            if (db_connection_attempts > THRESHOLD_CONN and db_reputation_score < THRESHOLD_SCORE):
                print 'Discarding file'
                accept_flag = False
        else:
            create_new_entry_flag = True
        if accept_flag:
            sock.send('clear_to_send_name')
            received_file = self.getFileName(sock, mac_address, port)
            print received_file
            sock.send('clear_to_send_file')
            self.getFileContent(sock, received_file)
            # Call cuckoo API for analysis
            # {
            #
            # }
            # updateClientDetails()
        else:
            sock.send('file_discarded')


    def getMacAddress(self, sock):
        mac_address = sock.recv(BUFFER_SIZE)
        return mac_address.strip()

    def getFileName(self, sock, mac_address, port):
        filename = sock.recv(BUFFER_SIZE)
        filename = filename.strip()
        filename = os.path.basename(filename)
        print filename
        # sari received files is location me store hogi
        # I mean jha se code run krega udhar ek recvdir name ka folder hona chaiye, isime files save hogi
        received_file =''+mac_address+'-'+str(port)+'-'+filename
        return received_file

    def getFileContent(self, sock, received_file):
        with open(received_file, 'w+') as f:
            while True:
                data = sock.recv(BUFFER_SIZE)
                if not data:
                    f.close()
                    break
                f.write(data)
        os.chmod(received_file, 0o777)    
        print " File received "

    def getClientDataByMacAddress(self, mac_address):
        select_stmt = select([reputation.c.connection_attempts, reputation.c.reputation_score]).where(reputation.c.mac_address == mac_address)
        db_data = connection.execute(select_stmt).fetchone()
        return db_data

    def updateClientDetails(self, mac_address_client, reputation_score_client, create_new_entry_flag):
        if create_new_entry_flag:
            insert_stmt = reputation.insert().\
                            values(mac_address=mac_address_client, connection_attempts=DEFAULT_CONNECTION_ATTEMPTS, reputation_score=reputation_score_client)
            connection.execute(insert_stmt)
        else:
            update_stmt = reputation.update().\
                            values(connection_attempts = (reputation.c.connection_attempts+1)).\
                            where(reputation.c.mac_address == mac_address_client)
            connection.execute(update_stmt)


# Tujhe ye main function call krna hai bhai UI se
# phle import kar lena is file ko, phir jaha pe server ko run krna hai wha main function call kar lena
# e.g., import final_server
#       final_server.main()
# Ye upar wale do line is file ko call kar lenge
def main():
    ThreadedServer('',TCP_PORT).listen()

# Ye samjhne ke baad goto line no 8
