# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'beproject.ui'
#
# Created: Sun Jan 14 16:21:31 2018
#      by: pyside-uic 0.2.15 running on PySide 1.2.4
#
# WARNING! All changes made in this file will be lost!

from PySide import QtCore, QtGui

import neighbours

import selfipmac

import final_client

import final_server

import requests

import json

#server address entered as cmd line arg
SERVER_ADDR = 0
#server port
SERVER_PORT = 0

#file path
FILE_PATH = ""


#reading config file
import json
with open('setting.json') as json_data:
    setting = json.load(json_data)

TCP_PORT = setting['TCP_PORT']
BUFFER_SIZE = setting['BUFFER_SIZE']

#Client IP and MAC
C_IP = 0
C_MAC = 0


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1000, 600)
        MainWindow.setMinimumSize(QtCore.QSize(1000, 600))
        MainWindow.setMaximumSize(QtCore.QSize(1000, 600))
        self.centralwidget = QtGui.QWidget(MainWindow)
        self.centralwidget.setMinimumSize(QtCore.QSize(1000, 600))
        self.centralwidget.setMaximumSize(QtCore.QSize(1000, 600))
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtGui.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 1000, 600))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())
        self.tabWidget.setSizePolicy(sizePolicy)
        self.tabWidget.setMinimumSize(QtCore.QSize(1000, 600))
        self.tabWidget.setMaximumSize(QtCore.QSize(1000, 600))
        self.tabWidget.setStyleSheet("")
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtGui.QWidget()
        self.tab.setStyleSheet("")
        self.tab.setObjectName("tab")
        self.textBrowser = QtGui.QTextBrowser(self.tab)
        self.textBrowser.setGeometry(QtCore.QRect(70, 20, 851, 291))
        self.textBrowser.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.textBrowser.setObjectName("textBrowser")
        self.line = QtGui.QFrame(self.tab)
        self.line.setGeometry(QtCore.QRect(0, 320, 991, 20))
        self.line.setFrameShape(QtGui.QFrame.HLine)
        self.line.setFrameShadow(QtGui.QFrame.Sunken)
        self.line.setObjectName("line")
        self.pushButton = QtGui.QPushButton(self.tab)
        self.pushButton.setGeometry(QtCore.QRect(420, 440, 151, 41))
        self.pushButton.setObjectName("pushButton")


        #fn call to directly check for a file(malware or not)
        self.pushButton.clicked.connect(self.submitForMalwareCheck)



        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtGui.QWidget()
        self.tab_2.setStyleSheet("")
        self.tab_2.setObjectName("tab_2")
        self.gridLayoutWidget = QtGui.QWidget(self.tab_2)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(270, 110, 461, 211))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtGui.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.pushButton_2 = QtGui.QPushButton(self.gridLayoutWidget)
        self.pushButton_2.setObjectName("pushButton_2")


        self.pushButton_2.clicked.connect(self.selectFile)


        self.gridLayout.addWidget(self.pushButton_2, 7, 1, 1, 1)
        self.label = QtGui.QLabel(self.gridLayoutWidget)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 4, 0, 1, 1)
        self.comboBox = QtGui.QComboBox(self.gridLayoutWidget)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.gridLayout.addWidget(self.comboBox, 4, 1, 1, 1)
        self.label_2 = QtGui.QLabel(self.gridLayoutWidget)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 7, 0, 1, 1)
        self.pushButton_3 = QtGui.QPushButton(self.tab_2)
        self.pushButton_3.setGeometry(QtCore.QRect(450, 410, 91, 31))
        self.pushButton_3.setObjectName("pushButton_3")

        #fn call to send selected file to another computer
        self.pushButton_3.clicked.connect(self.sendFile)

        self.line_2 = QtGui.QFrame(self.tab_2)
        self.line_2.setGeometry(QtCore.QRect(270, 350, 461, 20))
        self.line_2.setFrameShape(QtGui.QFrame.HLine)
        self.line_2.setFrameShadow(QtGui.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.tabWidget.addTab(self.tab_2, "")
        self.tab_3 = QtGui.QWidget()
        self.tab_3.setStyleSheet("")
        self.tab_3.setObjectName("tab_3")
        self.tableView = QtGui.QTableView(self.tab_3)
        self.tableView.setGeometry(QtCore.QRect(30, 40, 921, 391))
        self.tableView.setObjectName("tableView")
        #self.tabWidget.addTab(self.tab_3, "")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(QtGui.QApplication.translate("MainWindow", "BE Project", None, QtGui.QApplication.UnicodeUTF8))
        self.textBrowser.setText(QtGui.QApplication.translate("MainWindow", "Verbose:", None, QtGui.QApplication.UnicodeUTF8))
        self.pushButton.setText(QtGui.QApplication.translate("MainWindow", "Submit", None, QtGui.QApplication.UnicodeUTF8))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), QtGui.QApplication.translate("MainWindow", "Submit", None, QtGui.QApplication.UnicodeUTF8))
        self.pushButton_2.setText(QtGui.QApplication.translate("MainWindow", "...", None, QtGui.QApplication.UnicodeUTF8))
        self.label.setText(QtGui.QApplication.translate("MainWindow", "Select a Machine:", None, QtGui.QApplication.UnicodeUTF8))
        self.label_2.setText(QtGui.QApplication.translate("MainWindow", "Choose a File:", None, QtGui.QApplication.UnicodeUTF8))
        self.pushButton_3.setText(QtGui.QApplication.translate("MainWindow", "Send", None, QtGui.QApplication.UnicodeUTF8))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), QtGui.QApplication.translate("MainWindow", "Send", None, QtGui.QApplication.UnicodeUTF8))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), QtGui.QApplication.translate("MainWindow", "Downloads", None, QtGui.QApplication.UnicodeUTF8))

        self.textBrowser.append("\nClient IP: " + C_IP)
        self.textBrowser.append("\nClient MAC: " + C_MAC)

        # displaying n/w dev list in com box
        self.setNetworkDevicesList()


        # starting file receiving server in a thread
        self.threadRecv = self.initR()
        self.threadRecv.start()


#fn to select file using UI File Browser
    def selectFile(self):
    	#print (QtGui.QFileDialog.getOpenFileName()[0])
    	global FILE_PATH
    	FILE_PATH = QtGui.QFileDialog.getOpenFileName()[0]
    	self.textBrowser.append("Input File: " + FILE_PATH)
    	self.pushButton_2.setText(FILE_PATH)


#fn to submit file for malware analysis and get prediction result from flask server
    def submitForMalwareCheck(self):
    	global SERVER_ADDR
    	global FILE_PATH
    	self.selectFile()

    	self.mthread1 = self.mThread()
    	self.mthread1.connect(self.mthread1,QtCore.SIGNAL("finished()"),self.onJobDone)
    	self.mthread1.start()
#fn to show prediction result in verbose console  
    def onJobDone(self):
        print("shit ")
        f1 = open("res.txt","r+")
        self.verbose(f1.read())
        f1.close()


#fn to print log data to UI
    def verbose(self,text):
        self.textBrowser.append(text)    	


#fn to scan network and set appropriate data in items accordingly
    def setNetworkDevicesList(self):
    	list1 = neighbours.getNList(selfipmac.get_ip())
    	self.verbose("\nNetwork Devices Found:")
    	for l in list1:
    		self.verbose("".join(l))

    	self.comboBox.clear()
    	self.comboBox.addItems(list1)	


#fn to send a file to another computer/client
    def sendFile(self):
        global FILE_PATH
        Recv_IP = str(self.comboBox.currentText()).split()[0]
        Recv_PORT = TCP_PORT
        MAC_ADDRESS = str(self.comboBox.currentText()).split()[1]
        #clientfilesend.sendFile(FILE_PATH,Recv_IP,Recv_PORT,BUFFER_SIZE)
        self.verbose("Sending File "+FILE_PATH+" to "+Recv_IP)

        self.thread = self.sendFileThread(FILE_PATH,Recv_IP,Recv_PORT,BUFFER_SIZE,MAC_ADDRESS)
        self.thread.connect(self.thread,QtCore.SIGNAL("finished()"), self.msgBox)
        self.thread.start()
        


#thread to send file to a computer
    class sendFileThread(QtCore.QThread):
        def __init__(self,FILE_PATH,Recv_IP,Recv_PORT,BUFFER_SIZE,MAC_ADDRESS):
            QtCore.QThread.__init__(self)
            self.FILE_PATH=FILE_PATH
            self.Recv_IP=Recv_IP
            self.Recv_PORT=Recv_PORT
            self.BUFFER_SIZE=BUFFER_SIZE
            self.MAC_ADDRESS=MAC_ADDRESS

        def __del__(self):
            self.wait()
            
        def run(self):
          	final_client.sendFile(FILE_PATH,self.Recv_IP,self.Recv_PORT,self.BUFFER_SIZE,self.MAC_ADDRESS)
          	print("Sending File")         



#thread to submit file for malware analysis and return prediction
    class mThread(QtCore.QThread):

        job_done = QtCore.SIGNAL('QString')
        def __init__(self):
           QtCore.QThread.__init__(self)
           #job_done = QtCore.SIGNAL('QString')
           #self.signal = QtCore.SIGNAL("signal")
            
        def __del__(self):
            self.wait()
            
        def run(self):
                REST_URL = "http://"+SERVER_ADDR+":8090/tasks/create/file"
                with open(FILE_PATH, "rb") as sample:
                    files = {"file": ("temp_file_name", sample)}
                    r = requests.post(REST_URL, files=files)
                task_id = r.json()["task_id"]
                while True:
			    	req = requests.get("http://"+SERVER_ADDR+":8090/tasks/view/"+str(task_id))
			    	if req.json()["task"]["status"] == "reported":
			    		break
			    	time.sleep(10)

                FLASK_URL = "http://"+SERVER_ADDR+":4000/predict_api"
                data = json.dumps({'Task':str(task_id)})
                r1 = requests.post(FLASK_URL,data)
##                self.job_done.emit(str(r1.json()[1]))
                print("in thread")
                f1 = open("res.txt","w+")
                f1.write(""+str(r1.json()[1]))
                f1.close()
                #self.emit(QtCore.SIGNAL("finished()"),"lol")






#fn to display message box when file is sent
    def msgBox(self):
        msgBox = QtGui.QMessageBox()
        msgBox.setText("File Sent!")
        msgBox.exec_()







#thread to start recv server
    class initR(QtCore.QThread):
        def __init__(self):
            QtCore.QThread.__init__(self)


        #fn to start file receiving server
        def initRecv(self):
           final_server.main()



        def __del__(self):
            self.wait()

        def run(self):
                self.initRecv()






if __name__ == "__main__":
   import sys
   SERVER_ADDR = sys.argv[1]
   C_IP = selfipmac.get_ip()
   C_MAC = selfipmac.mac_for_ip(C_IP)
   print(SERVER_ADDR)
   app = QtGui.QApplication(sys.argv)
   MainWindow = QtGui.QMainWindow()
   ui = Ui_MainWindow()
   ui.setupUi(MainWindow)
   MainWindow.show()
   sys.exit(app.exec_())
  
